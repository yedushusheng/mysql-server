enable parallel query forcibly with max_parallel_degree = 1 and cost/records threshold = 0
CREATE TABLE t1(a int primary key, b int, c text, index(b));
INSERT INTO t1 VALUES(1, 1, '1'),(2, 2, '2');
EXPLAIN FORMAT=tree SELECT * FROM t1;
EXPLAIN
-> Table scan on t1  (cost=1127.50 rows=10000)

EXPLAIN FORMAT=tree SELECT b FROM t1 where c = 1;
EXPLAIN
-> Gather (slice: 1, workers: 1)  (cost=1127.50 rows=1000)
    -> Filter: (t1.c = 1)  (cost=1127.50 rows=1000)
        -> Table scan on t1  (cost=1127.50 rows=10000)

EXPLAIN FORMAT=tree SELECT a, b FROM t1 WHERE a = 1;
EXPLAIN
-> Rows fetched before execution  (cost=0.00..0.00 rows=1)

EXPLAIN FORMAT=tree SELECT a, b FROM t1 WHERE b = 1;
EXPLAIN
-> Index lookup on t1 using b (b=1)  (cost=0.35 rows=1)

EXPLAIN FORMAT=tree SELECT b FROM t1 WHERE b between 1 and 2;
EXPLAIN
-> Gather (slice: 1, workers: 1)  (cost=0.46 rows=1)
    -> Filter: (t1.b between 1 and 2)  (cost=0.46 rows=1)
        -> Index range scan on t1 using b  (cost=0.46 rows=1)

DROP TABLE t1;
CREATE TABLE t1 (f1 INT, f2 INT);
INSERT INTO t1 VALUES (1, 0), (2, 1), (3, 2);
CREATE TABLE t2 (f1 INT, f2 INT);
EXPLAIN FORMAT=tree SELECT t1.f1
FROM t1
HAVING (3, 2) IN (SELECT f1, f2 FROM t2) AND t1.f1  >= 0
ORDER BY t1.f1;
EXPLAIN
-> Zero rows (Impossible HAVING)  (cost=0.00..0.00 rows=0)

DROP TABLE t1, t2;
CREATE TABLE t1(a int);
SELECT 1 FROM t1 WHERE 1 > ALL(SELECT 1 FROM t1 WHERE a);
1
DROP TABLE t1;
