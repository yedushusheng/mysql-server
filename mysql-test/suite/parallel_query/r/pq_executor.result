enable parallel query with max_parallel_degree = 1
CREATE TABLE t1 (a INT, b INT, c INT DEFAULT 0);
INSERT INTO t1 (a, b) VALUES (3,3), (2,2), (3,3), (2,2), (3,3), (4,4);
CREATE TABLE t2 SELECT * FROM t1;
FLUSH STATUS;
EXPLAIN format=tree SELECT t1.a, SUM(t1.b) FROM t1
WHERE t1.a = (SELECT SUM(t2.b) FROM t2
ORDER BY SUM(t2.b) + SUM(t1.b) LIMIT 1)
GROUP BY t1.a;;
EXPLAIN
-> Table scan on <temporary>
    -> Aggregate using temporary table
        -> Filter: (t1.a = (select #2))  (cost=1127.50 rows=10000)
            -> Table scan on t1  (cost=1127.50 rows=10000)
            -> Select #2 (subquery in condition; dependent)
                -> Limit: 1 row(s)  (cost=2127.50 rows=1)
                    -> Aggregate: sum(b)  (cost=2127.50 rows=10000)
                        -> Gather (slice: 1, workers: 1)
                            -> Aggregate: sum(t2.b)  (cost=2127.50 rows=10000)
                                -> Table scan on t2  (cost=1127.50 rows=10000)

Warnings:
Note	1276	Field or reference 'test.t1.b' of SELECT #2 was resolved in SELECT #1
SELECT t1.a, SUM(t1.b) FROM t1
WHERE t1.a = (SELECT SUM(t2.b) FROM t2
ORDER BY SUM(t2.b) + SUM(t1.b) LIMIT 1)
GROUP BY t1.a;;
a	SUM(t1.b)
SELECT variable_value > @@max_parallel_degree AS has_worker_created FROM performance_schema.session_status WHERE Variable_name = 'PQ_workers_created';
has_worker_created
1
DROP TABLE t1, t2;
CREATE TABLE t1 (col1 INT, col2 VARCHAR(5), col_t1 INT);
CREATE TABLE t2 (col1 INT, col2 VARCHAR(5), col_t2 INT);
INSERT INTO t1 VALUES(10,'hello',10);
INSERT INTO t1 VALUES(20,'hello',20);
INSERT INTO t1 VALUES(30,'hello',30);
INSERT INTO t1 VALUES(10,'bye',10);
INSERT INTO t1 VALUES(10,'sam',10);
INSERT INTO t1 VALUES(10,'bob',10);
INSERT INTO t2 SELECT * FROM t1;
SELECT t1.col1 FROM t1 WHERE t1.col2 IN  (SELECT /*+ SUBQUERY(MATERIALIZATION) */ t2.col2 FROM t2  GROUP BY t2.col1, t2.col2 HAVING t2.col1 <= 10);
col1
10
20
30
10
10
10
DROP TABLE t1, t2;
